package controller;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import model.User;
import service.UserService;
import service.UserServiceImpl;

@WebServlet(urlPatterns = "/login")
public class LoginController extends HttpServlet {

    private static final String SESSION_USERNAME = "username";
    private static final String COOKIE_REMEMBER  = "username";

    private UserService userService = new UserServiceImpl();

    // --- GET: hiển thị trang login hoặc tự động đăng nhập bằng cookie ---
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
            throws ServletException, IOException {
        
        HttpSession session = req.getSession(false);

        // Nếu đã có session -> chuyển sang /waiting
        if (session != null && session.getAttribute(SESSION_USERNAME) != null) {
            resp.sendRedirect(req.getContextPath() + "/waiting");
            return;
        }

        // Kiểm tra cookie remember-me
        Cookie[] cookies = req.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (COOKIE_REMEMBER.equals(cookie.getName())) {
                    session = req.getSession(true);
                    session.setAttribute(SESSION_USERNAME, cookie.getValue());
                    resp.sendRedirect(req.getContextPath() + "/waiting");
                    return;
                }
            }
        }

        // Chưa đăng nhập -> forward về login.jsp
        req.getRequestDispatcher("/decorators/login.jsp").forward(req, resp);
    }

    // --- POST: xử lý khi submit form login ---
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) 
            throws ServletException, IOException {
        
        resp.setContentType("text/html;charset=UTF-8");
        req.setCharacterEncoding("UTF-8");

        String username  = req.getParameter("username");
        String password  = req.getParameter("password");
        String remember  = req.getParameter("remember");
        boolean isRememberMe = "on".equals(remember);

        String alertMsg = "";

        // Kiểm tra rỗng
        if (username == null || username.isEmpty() 
                || password == null || password.isEmpty()) {
            
            alertMsg = "Tài khoản hoặc mật khẩu không được rỗng";
            req.setAttribute("alert", alertMsg);
            req.getRequestDispatcher("/decorators/login.jsp").forward(req, resp);
            return;
        }

        // Gọi service kiểm tra user
        User user = userService.login(username, password);

        if (user != null) {
            HttpSession session = req.getSession(true);
            session.setAttribute(SESSION_USERNAME, user);

            // Nếu chọn remember-me thì lưu cookie
            if (isRememberMe) {
                saveRememberMe(resp, username);
            }

            resp.sendRedirect(req.getContextPath() + "/waiting");
        } else {
            alertMsg = "Tài khoản hoặc mật khẩu không đúng";
            req.setAttribute("alert", alertMsg);
            req.getRequestDispatcher("/decorators/login.jsp").forward(req, resp);
        }
    }

    // --- Hàm lưu cookie remember-me ---
    private void saveRememberMe(HttpServletResponse response, String username) {
        Cookie cookie = new Cookie(COOKIE_REMEMBER, username);
        cookie.setMaxAge(30 * 60); // 30 phút
        cookie.setPath("/");       // cookie hợp lệ cho toàn app
        response.addCookie(cookie);
    }
}
